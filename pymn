#!/usr/bin/env python
from argparse import ArgumentParser
from sys import argv
from mininet.node import CPULimitedHost, RemoteController
from mininet.net import Mininet
from mininet.log import setLogLevel, info
from mininet.cli import CLI
import topology
import switch

def run():
    # Parse arguments and store them
    parser = ArgumentParser()

    parser.add_argument(
            '-c', '--controller',
            action='append', type=str)

    parser.add_argument(
            '-a', '--topo-arg',
            action='append', type=int)

    parser.add_argument(
            '-t', '--topo', const="SwitchTopo",
            nargs='?', type=str,
            help='LinearTopo, SwitchTopo, SingleSwitchTopo, SingleSwitchReversedTopo, TreeTopo (default: SwitchTopo)')

    parser.add_argument(
            '-s', '--switch', const="OVSSwitch",
            nargs='?', type=str,
            help='OVSSwitch, UserSwitch, OVSLegacyKernelSwitch (default: OVSSwitch)')

    a = parser.parse_args()

    # If no arguments passed, set the default values
    if a.controller == None: a.controller = [ "127.0.0.1" ]
    if a.topo_arg == None:   a.topo_arg = [ 1 ]
    if a.topo == None:       a.topo = "SwitchTopo"
    if a.switch == None:     a.switch = "OVSSwitch"

    # Create topology
    cur_topo = getattr(topology, a.topo)(*a.topo_arg)

    # Get switch type
    cur_switch = getattr(switch, a.switch)

    # Create mininet
    net = Mininet(topo=cur_topo, switch=cur_switch, controller=None)

    # Create and add controllers
    for i, address in enumerate(a.controller):
        net.addController(RemoteController('c{0}'.format(i), address, 6653))

    # Start mininet, open CLI and then stop mininet
    net.start()
    CLI(net)
    net.stop()

if __name__ == '__main__':
    setLogLevel('info')
    run()
